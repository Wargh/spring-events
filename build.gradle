plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'com.github.ben-manes.versions' version '0.24.0' // gradle dependencyUpdates
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven'
}

group = 'com.sambrannen'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

// Special syntax for overriding spring-boot-dependencies
// https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.2.0.RELEASE/spring-boot-dependencies-2.2.0.RELEASE.pom
// ext['junit-jupiter.version']   = '5.5.2'
// ext['spring-security.version'] = '5.2.0.RELEASE'
// ext['spring.version']          = '5.2.0.RELEASE'

repositories {
	mavenCentral()
	// maven { url 'http://repo.spring.io/snapshot' }
	// maven { url 'http://repo.spring.io/milestone' }
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-web')

	runtimeOnly('org.springframework.boot:spring-boot-starter-actuator')
	runtimeOnly('org.springframework.boot:spring-boot-starter-thymeleaf')
	runtimeOnly('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
	runtimeOnly('com.h2database:h2')

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testImplementation('org.junit.platform:junit-platform-runner')
	testImplementation('org.testng:testng:7.0.0')

	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

task junit(type: Test) {
	description = 'Runs tests on the JUnit Platform.'
	useJUnitPlatform()
	testLogging {
		// events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
		events 'passed', 'skipped', 'failed'
	}
	include '**/*Tests.class'
	exclude '**/*TestNg*.*'
}

task testNG(type: Test) {
	description = 'Runs TestNG tests.'
	useTestNG()
	testLogging {
		// events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
		events 'passed', 'skipped', 'failed'
	}
	scanForTestClasses = false
	include '**/*TestNgTests.class'
	// Show STD_OUT & STD_ERR of the test JVM(s) on the console:
	// testLogging.showStandardStreams = true
	// forkEvery 1
}

test {
	description = 'Runs all tests.'
	dependsOn junit, testNG
	exclude(['**/*.*'])
}

task aggregateTestReports(type: TestReport) {
	description = 'Aggregates JUnit and TestNG test reports.'
	destinationDir = test.reports.html.destination
	reportOn junit, testNG
}

check.dependsOn aggregateTestReports

wrapper {
	gradleVersion = '5.6.3'
}
